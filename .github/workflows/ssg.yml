name: Deploy site

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-elixir:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        with:
          version-file: ".tool-versions"
          version-type: strict
      - name: Elixir Deps Cache
        id: elixir-deps-cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
            .mix/archives/
          key: elixir-build-${{hashFiles('.tool-versions')}}-${{hashFiles('mix.lock')}}
          restore-keys: elixir-build-${{hashFiles('.tool-versions')}}-

      - name: Install Elixir Dependencies
        run: |
          mix local.hex --force --if-missing
          mix deps.get

      - name: "Build Tableau"
        env:
          MIX_ENV: prod
        run: |
          mix tableau.build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./_site
          if-no-files-found: error
          name: site-elixir

  build-assets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
      - name: Bun Deps Cache
        id: bun-deps-cache
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-cache-${{hashFiles('.tool-versions')}}-${{hashFiles('assets/bun.lock')}}
          restore-keys: bun-cache-${{hashFiles('.tool-versions')}}-

      - name: Install node Dependencies
        working-directory: assets/
        run: bun install --frozen-lockfile

      - name: "Build static assets"
        working-directory: assets/
        env:
          NODE_ENV: "production"
        run: |
          bun run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./_site
          if-no-files-found: error
          name: site-static

  deploy-netlify:
    needs:
      - build-elixir
      - build-assets
    runs-on: ubuntu-latest
    environment:
      name: netlfiy-prod
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            package.json
            package-lock.json
            .tool-versions
      - uses: actions/download-artifact@v4
        with:
          path: _site/
          pattern: site-*
          merge-multiple: true
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".tool-versions"
          cache: npm
          cache-dependency-path: package-lock.json
      - name: Minify cache
        id: minify-cache
        uses: actions/cache@v4
        with:
          path: |
            ./minify
          key: minify-0.15.0
      - name: Download minify script
        if: steps.minify-cache.outputs.cache-hit != 'true'
        run: |
          curl https://github.com/wilsonzlin/minify-html/releases/download/v0.15.0/minhtml-0.15.0-x86_64-unknown-linux-gnu > minify
          chmod +x minify

      - name: Shrink HTML
        run: |
          shopt -s globstar
          ./minify --minify-css --minify-js _site/**/*.html
      - name: Install Netlify CLI
        run: npm install --save-dev
      - name: Deploy to Netlify
        run: npx netlify deploy --dir=_site --prod -m "https://github.com/paradox460/pdx.su/commit/${{ github.sha }}"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
