name: Deploy site to GH pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        with:
          version-file: ".tool-versions"
          version-type: strict
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".tool-versions"
      - name: Elixir Deps Cache
        id: elixir-deps-cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
            .mix/archives/
          key: elixir-build-${{hashFiles('.tool-versions')}}-${{hashFiles('mix.lock')}}
          restore-keys: elixir-build-${{hashFiles('.tool-versions')}}-

      - name: Install Elixir Dependencies
        run: |
          mix local.hex --force --if-missing
          mix deps.get

      # Setup-node doesn't play nice with yarn > 2 Because of corepack issues
      # You can probably remove this manual cache later
      - name: Enable corepack for new yarn
        run: corepack enable
      - name: "Get yarn cache dir"
        id: yarn-cache-dir-path
        working-directory: assets/
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Yarn Deps Cache
        id: yarn-deps-cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-${{hashFiles('.tool-versions')}}-${{hashFiles('assets/yarn.lock')}}
          restore-keys: yarn-cache-${{hashFiles('.tool-versions')}}-

      - name: Install node Dependencies
        working-directory: assets/
        run: yarn

      - name: "Build Tableau"
        env:
          MIX_ENV: prod
        run: |
          mix tableau.build

      - name: "Build static assets"
        working-directory: assets/
        env:
          NODE_ENV: "production"
        run: |
          yarn build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./_site
          if-no-files-found: error
          name: site

  deploy-netlify:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: netlfiy-prod
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            package.json
            package-lock.json
            .tool-versions
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".tool-versions"
      - name: Install Netlify CLI
        run: npm install
      - uses: actions/download-artifact@v4
        with:
          name: site
          path: _site/
      - name: Deploy to Netlify
        run: netlify deploy --dir=_site --prod -m "https://github.com/paradox460/pdx.su/commit/${{ github.sha }}"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
