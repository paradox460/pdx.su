amends "package://pkg.pkl-lang.org/github.com/stefma/pkl-gha/com.github.action@::77880b6#/Workflow.pkl"
import "package://pkg.pkl-lang.org/github.com/stefma/pkl-gha/com.github.action@::77880b6#/Action.pkl"

import "modules/mise.pkl"

name = "Deploy Site"

on {
  push {
    branches {
      "main"
    }
  }
  workflow_dispatch {}
}


concurrency = new Concurrency {
  group = "pages"
  `cancel_in_progress` = true
}

jobs {
  ["build-elixir"] = new {
    `runs-on` = "ubuntu-24.04"
    steps {
      Action.checkout
      (Mise) {
        mise_toml = """
          [settings]
          enable_tools = ["elixir", "erlang"]
          """
      }
      (Action.cache) {
        name = "Elixir Deps cache"
        id = "elixir-deps-cache"
        path = """
          deps
          _build
          .mix/archives/
          """
        key = "elixir-build-${{hashFiles('.tool-versions')}}-${{hashFiles('mix.lock')}}"
        `restore-keys` = "elixir-build-${{hashFiles('.tool-versions')}}-"
      }
      new {
        name = "Install Elixir Dependencies"
        run = """
          mix local.hex --force --if-missing
          mix deps.get
          """
      }
      new {
        name = "Build Tableau"
        env = new EnvironmentVariables {
          ["MIX_ENV"] = "prod"
        }
        run = "mix tableau.build"
      }
      (Action.uploadArtifact) {
        path = "./_site"
        ifNoFilesFound = "error"
        name = "site-elixir"
      }
    }
  }
  ["build-assets"] = new {
    `runs-on` = "ubuntu-latest"
    steps {
      Action.checkout
      (Mise) {
        mise_toml = """
          [settings]
          enable_tools = ["bun"]
          """
      }
      (Action.cache) {
        name = "Bun Deps Cache"
        id = "bun-deps-cache"
        path = "~/.bun/install/cache"
        key = "bun-cache-${{hashFiles('.tool-versions')}}-${{hashFiles('assets/bun.lock')}}"
        `restore-keys` = "bun-cache-${{hashFiles('.tool-versions')}}-"
      }
      new {
        name = "Install JS dependencies"
        `working-directory` = "assets/"
        run = "bun install --frozen-lockfile"
      }
      new {
        name = "Build Static Assets"
        `working-directory` = "assets/"
        env = new EnvironmentVariables {
          ["NODE_ENV"] = "production"
        }
        run = "bun run build"
      }
      (Action.uploadArtifact) {
        path = "./_site"
        ifNoFilesFound = "error"
        name = "site-static"
      }
    }
  }

  ["deploy-netlify"] = new {
    needs = List("build-elixir", "build-assets")
    `runs-on` = "ubuntu-latest"
    environment = new Environment {
      name = "netlify-prod"
    }
    steps {
      (Action.checkout) {
        sparseCheckoutConeMode = false
        sparseCheckout = """
          .mise.toml
          .mise.lock
          """
      }
      (Action.downloadArtifact) {
        path = "_site/"
        pattern = "site-*"
        mergeMultiple = true
      }
      (Mise) {
        mise_toml = """
          [settings]
          enable_tools = ["ubi:wilsonzlin/minify-html"]
          """
      }
      new {
        name = "Minify HTML"
        run = """
          shopt -s globstar
          minify-html --minify-css --minify-js _site/**/*.html
          """
      }
      new {
        name = "Deploy to Netlify"
        uses = "netlify/actions/cli@master"
        with {
          ["args"] = #"deploy --dir=_site --prod -m "https://github.com/paradox460/pdx.su/commit/${{ github.sha }}""#
        }
        env = new EnvironmentVariables {
          ["NETLIFY_SITE_ID"] = "${{ secrets.NETLIFY_SITE_ID }}"
          ["NETLIFY_AUTH_TOKEN"] = "${{ secrets.NETLIFY_AUTH_TOKEN }}"
        }
      }
    }
  }
}
